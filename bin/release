#!/usr/bin/env bash
set -euo pipefail
IFS=$'\n\t'
# set -vx

# Ensure bundle is installed
if ! command -v bundle &> /dev/null; then
  echo "bundle could not be found. Please install bundler."
  exit 1
fi

# Ensure git is installed
if ! command -v git &> /dev/null; then
  echo "git could not be found. Please install git."
  exit 1
fi

# Ensure the working directory is clean
if ! git diff-index --quiet HEAD --; then
  echo "Working directory is not clean. Please commit or stash your changes."
  exit 1
fi

# Install dependencies
bundle install

# Function to update the version in version.rb
update_version() {
  local new_version=$1
  local version_file="lib/dev_suite/version.rb"
  sed -i '' -E "s/VERSION = \"[0-9]+\.[0-9]+\.[0-9]+\"/VERSION = \"${new_version}\"/" $version_file
}

# Function to run shell commands and handle errors
run_command() {
  local command=$1
  echo "Running: ${command}"
  eval $command
  if [ $? -ne 0 ]; then
    echo "Command failed: ${command}"
    exit 1
  fi
}

# Get the new version from the command line arguments
if [ $# -eq 0 ]; then
  echo "Usage: $0 <new_version>"
  exit 1
fi

new_version=$1

# Update the version in version.rb
update_version $new_version

# Commit the changes
run_command "git add lib/dev_suite/version.rb"
run_command "git commit -m \"Bump version to ${new_version}\""

# Tag the new version
run_command "git tag -a v${new_version} -m \"Release version ${new_version}\""

# Push the changes and the tag to the remote repository
run_command "git push origin main"
run_command "git push origin --tags"

echo "Version updated to ${new_version} and tagged in Git."